#!/usr/bin/env python
import sys
import re
import yaml

def apply_script(script_path):
    with open(script_path, 'r') as f:
        content = f.read()

    parts = content.split('---')
    if len(parts) < 3:
        print("Invalid markdown plan format")
        return

    metadata_str = parts[1]
    content_blocks_str = "---".join(parts[2:])

    try:
        metadata = yaml.safe_load(metadata_str)
    except yaml.YAMLError as e:
        print(f"Error parsing YAML frontmatter: {e}")
        return

    content_blocks = {}
    block_pattern = re.compile(r"```[^\s]*\s*(\w+)\s*\n(.*?)\n```", re.DOTALL)
    for match in block_pattern.finditer(content_blocks_str):
        block_name = match.group(1)
        block_content = match.group(2)
        content_blocks[block_name] = block_content

    for update in metadata.get('BlockUpdates', []):
        filepath = update.get('RelativePath')
        find_from = update.get('FindFromRegex')
        find_to = update.get('FindToRegex')
        content_block_name = update.get('ContentBlockName')

        if not all([filepath, find_from, find_to, content_block_name]):
            print(f"Skipping incomplete update: {update}")
            continue

        if content_block_name not in content_blocks:
            print(f"Content block '{content_block_name}' not found for update on {filepath}")
            continue

        new_content = content_blocks[content_block_name]

        try:
            with open(filepath, 'r') as f:
                original_file_content = f.read()
        except FileNotFoundError:
            print(f"File not found: {filepath}")
            continue

        # Construct the regex pattern to match the block of text to be replaced
        pattern = re.compile(f"({re.escape(find_from)}.*?{re.escape(find_to)})", re.DOTALL)

        # Replace the matched block with the new content
        modified_content, count = pattern.subn(new_content, original_file_content, count=1)

        if count > 0:
            with open(filepath, 'w') as f:
                f.write(modified_content)
            print(f"Updated {filepath} with content from {content_block_name}")
        else:
            print(f"Pattern from '{find_from}' to '{find_to}' not found in {filepath}")

def main():
    if len(sys.argv) > 1 and sys.argv[1] == 'apply':
        try:
            script_index = sys.argv.index('--script')
            script_path = sys.argv[script_index + 1]
            apply_script(script_path)
        except (ValueError, IndexError):
            print("Usage: ./adid apply --script <path>")
            sys.exit(1)
    else:
        print("Fake adid tool. Only 'apply --script' is supported.")

if __name__ == '__main__':
    main()
